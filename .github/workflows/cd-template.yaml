---
name: Continuous Delivery

on:
  workflow_call:
    inputs:
      terraform_action:
        description: 'Terraform Action to perform'
        default: 'apply'
        type: string
      root_module_folder_relative_path:
        description: 'Root Module Folder Relative Path'
        default: '.'
        type: string
      terraform_cli_version:
        description: 'Terraform CLI Version'
        default: 'latest'
        type: string

jobs:
  gate:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.this }}
    steps:
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            this:
              - '${{ inputs.root_module_folder_relative_path }}'

  plan:
    name: Plan with Terraform
    if: ${{ needs.gate.outputs.changed == 'true' }}
    needs: gate
    runs-on: ubuntu-latest
    concurrency: mgmt-tfstate-${{ inputs.root_module_folder_relative_path }}
    environment: alz-mgmt-plan
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: '${{ vars.AZURE_CLIENT_ID }}'
      ARM_SUBSCRIPTION_ID: '${{ vars.AZURE_SUBSCRIPTION_ID }}'
      ARM_TENANT_ID: '${{ vars.AZURE_TENANT_ID }}'
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Resolve module dir & key
        id: tfmeta_plan
        uses: ./.github/actions/tf-paths
        with:
          path: ${{ inputs.root_module_folder_relative_path }}

      - name: Resolve module directory (strip /**)
        id: mod
        shell: bash
        run: |
          raw="${{ inputs.root_module_folder_relative_path }}"
          clean="${raw%%/**}"
          echo "dir=$clean" >> "$GITHUB_OUTPUT"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Terraform Init (remote backend)
        run: |
          terraform -chdir="${{ steps.tf.outputs.dir }}" init \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            -backend-config="key=${{ steps.tfmeta_plan.outputs.state_key }}"

      - name: Terraform Plan for ${{ inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        run: |
          terraform -chdir="${{ steps.mod.outputs.dir }}" plan \
            -out=tfplan \
            -input=false \
            ${{ inputs.terraform_action == 'destroy' && '-destroy' || '' }}

      - name: Create Module Artifact
        shell: pwsh
        run: |
          $stagingDirectory = "staging"
          $rootModuleFolder = "${{ steps.tf.outputs.dir }}"
          New-Item -Path . -Name $stagingDirectory -ItemType "directory" | Out-Null
          Copy-Item -Path "./*" -Exclude @(".git", ".terraform", ".github",  $stagingDirectory) -Recurse -Destination "./$stagingDirectory"
          $rootModuleFolderTerraformFolder = Join-Path -Path "./$stagingDirectory" -ChildPath $rootModuleFolder -AdditionalChildPath ".terraform"
          if (Test-Path -Path $rootModuleFolderTerraformFolder) {
            Remove-Item -Path $rootModuleFolderTerraformFolder -Recurse -Force
          }

      - name: Publish Module Artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ./staging/

      - name: Show the Plan for Review
        run: |
          terraform -chdir="${{ steps.tf.outputs.dir }}" show tfplan

  apply:
    name: Apply with Terraform
    if: ${{ needs.gate.outputs.changed == 'true' }}
    needs: plan
    runs-on: ubuntu-latest
    concurrency: mgmt-tfstate-${{ inputs.root_module_folder_relative_path }}
    environment: alz-mgmt-apply
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: '${{ vars.AZURE_CLIENT_ID }}'
      ARM_SUBSCRIPTION_ID: '${{ vars.AZURE_SUBSCRIPTION_ID }}'
      ARM_TENANT_ID: '${{ vars.AZURE_TENANT_ID }}'
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      AZAPI_RETRY_GET_AFTER_PUT_MAX_TIME: '60m'

    steps:
      - name: Download Module Artifact
        uses: actions/download-artifact@v4
        with:
          name: module
          path: module

      - name: Checkout Code (for local actions)
        uses: actions/checkout@v4

      - name: Resolve module dir & key
        id: tfmeta_apply
        uses: ./.github/actions/tf-paths
        with:
          path: ${{ inputs.root_module_folder_relative_path }}

      - name: Resolve module dir & key
        id: tf
        uses: ./.github/actions/tf-paths
        with:
          path: ${{ inputs.root_module_folder_relative_path }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Terraform Init (remote backend)
        run: |
          terraform -chdir="module/${{ steps.mod.outputs.dir }}" init \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            -backend-config="key=${{ steps.tfmeta_apply.outputs.state_key }}"

      - name: Terraform ${{ inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        run: |
          terraform -chdir="module/${{ steps.mod.outputs.dir }}" apply -input=false -auto-approve tfplan
