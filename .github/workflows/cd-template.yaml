---
name: Continuous Delivery

on:
  workflow_call:
    inputs:
      terraform_action: { type: string, default: 'apply' }
      root_module_folder_relative_path: { type: string, default: '.' }
      terraform_cli_version: { type: string, default: 'latest' }
      base_ref: { type: string, default: '' }
      skip_change_detection: { type: boolean, default: false }

jobs:
  gate:
    name: Detect changes
    runs-on: ubuntu-latest
    environment: alz-mgmt-plan
    permissions:
      contents: read
    outputs:
      changed: ${{ steps.out.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: skip
        if: ${{ inputs.skip_change_detection }}
        run: echo "this=true" >> "$GITHUB_OUTPUT"

      - id: filter
        if: ${{ !inputs.skip_change_detection }}
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ inputs.base_ref }}
          filters: |
            this:
              - '${{ inputs.root_module_folder_relative_path }}'

      - id: out
        run: |
          val="${{ steps.skip.outputs.this || steps.filter.outputs.this }}"
          echo "changed=$val" >> "$GITHUB_OUTPUT"

  plan:
    name: Plan with Terraform
    if: ${{ needs.gate.outputs.changed == 'true' }}
    needs: gate
    runs-on: ubuntu-latest
    concurrency: mgmt-tfstate-${{ inputs.root_module_folder_relative_path }}
    environment: alz-mgmt-plan
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: '${{ vars.AZURE_CLIENT_ID }}'
      ARM_SUBSCRIPTION_ID: '${{ vars.AZURE_SUBSCRIPTION_ID }}'
      ARM_TENANT_ID: '${{ vars.AZURE_TENANT_ID }}'
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Resolve module dir & key
        id: tfmeta_plan
        uses: ./.github/actions/tf-paths
        with:
          path: ${{ inputs.root_module_folder_relative_path }}

      - name: Resolve module directory (strip /**)
        id: mod
        shell: bash
        run: |
          raw="${{ inputs.root_module_folder_relative_path }}"
          clean="${raw%%/**}"
          echo "dir=$clean" >> "$GITHUB_OUTPUT"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Terraform Init (remote backend)
        run: |
          terraform -chdir="${{ steps.mod.outputs.dir }}" init \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            -backend-config="key=${{ steps.tfmeta_plan.outputs.state_key }}"

      - name: Terraform Plan for ${{ inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        run: |
          terraform -chdir="${{ steps.mod.outputs.dir }}" plan \
            -out=tfplan \
            -input=false \
            ${{ inputs.terraform_action == 'destroy' && '-destroy' || '' }}

      - name: Create Module Artifact
        shell: pwsh
        run: |
          $stagingDirectory = "staging"
          $rootModuleFolder = "${{ steps.mod.outputs.dir }}"
          New-Item -Path . -Name $stagingDirectory -ItemType "directory" | Out-Null
          Copy-Item -Path "./*" -Exclude @(".git", ".terraform", ".github",  $stagingDirectory) -Recurse -Destination "./$stagingDirectory"
          $rootModuleFolderTerraformFolder = Join-Path -Path "./$stagingDirectory" -ChildPath $rootModuleFolder -AdditionalChildPath ".terraform"
          if (Test-Path -Path $rootModuleFolderTerraformFolder) {
            Remove-Item -Path $rootModuleFolderTerraformFolder -Recurse -Force
          }

      - name: Publish Module Artifact
        uses: actions/upload-artifact@v4
        with:
          name: module-${{ steps.mod.outputs.dir }} # <-- unique per module
          path: ./staging/

      - name: Save plan as text & JSON
        shell: bash
        run: |
          # Plain text (nice to read in a code block)
          terraform -chdir="${{ steps.mod.outputs.dir }}" show -no-color tfplan > tfplan.txt
          # JSON (so we can count actions)
          terraform -chdir="${{ steps.mod.outputs.dir }}" show -json tfplan > tfplan.json

      - name: Add plan to job summary
        shell: bash
        run: |
          # Counts
          creates=$(jq '[.resource_changes[] | select(.change.actions | index("create"))] | length' tfplan.json)
          updates=$(jq '[.resource_changes[] | select(.change.actions | index("update"))] | length' tfplan.json)
          deletes=$(jq '[.resource_changes[] | select(.change.actions | index("delete"))] | length' tfplan.json)
          replaces=$(jq '[.resource_changes[] | select((.change.actions == ["delete","create"]) or (.change.actions == ["create","delete"]))] | length' tfplan.json)
          total=$((creates + updates + deletes))

          echo "## Terraform Plan for \`${{ steps.mod.outputs.dir }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [ "$total" -eq 0 ]; then
            echo "> ✅ No changes. Your infrastructure matches the configuration." >> "$GITHUB_STEP_SUMMARY"
          else
            # Totals table
            {
              echo "| Action     | Count |"
              echo "|------------|------:|"
              echo "| ➕ Create  | $creates |"
              echo "| ♻️ Replace | $replaces |"
              echo "| ✏️ Update  | $updates |"
              echo "| ❌ Delete  | $deletes |"
            } >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"

            # Top changed resources (address and action)
            echo "<details><summary>Changed resources (top 20)</summary>" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            jq -r '
              .resource_changes[]
              | {addr: .address, acts: (.change.actions | join(","))}
              | select(.acts | test("create|update|delete"))
              | "- \(.addr) [\(.acts)]"
            ' tfplan.json | head -n 20 >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "</details>" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"

            # Pretty diff block (first 400 lines)
            {
              echo "<details><summary>Full plan (first 400 lines)</summary>"
              echo ""
              echo '```diff'
              sed -n '1,400p' tfplan.txt
              echo '```'
              echo ""
              echo "_(truncated — see logs for full output)_"
              echo "</details>"
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Show the Plan for Review
        run: terraform -chdir="${{ steps.mod.outputs.dir }}" show tfplan

  apply:
    name: Apply with Terraform
    if: ${{ needs.gate.outputs.changed == 'true' }}
    needs: plan
    runs-on: ubuntu-latest
    concurrency: mgmt-tfstate-${{ inputs.root_module_folder_relative_path }}
    environment: alz-mgmt-apply
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: '${{ vars.AZURE_CLIENT_ID }}'
      ARM_SUBSCRIPTION_ID: '${{ vars.AZURE_SUBSCRIPTION_ID }}'
      ARM_TENANT_ID: '${{ vars.AZURE_TENANT_ID }}'
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      AZAPI_RETRY_GET_AFTER_PUT_MAX_TIME: '60m'

    steps:
      # 1) Compute sanitized module dir FIRST (so we can use it below)
      - name: Resolve module directory (strip /**)
        id: mod
        shell: bash
        run: |
          raw="${{ inputs.root_module_folder_relative_path }}"
          clean="${raw%%/**}"
          echo "dir=$clean" >> "$GITHUB_OUTPUT"

      # 2) Now we can safely reference steps.mod.outputs.dir for the artifact name
      - name: Download Module Artifact
        uses: actions/download-artifact@v4
        with:
          name: module-${{ steps.mod.outputs.dir }}
          path: module

      # 3) Checkout to make local action available
      - name: Checkout Code (for local actions)
        uses: actions/checkout@v4

      # 4) Resolve dir & key (uses local action)
      - name: Resolve module dir & key
        id: tfmeta_apply
        uses: ./.github/actions/tf-paths
        with:
          path: ${{ inputs.root_module_folder_relative_path }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Terraform Init (remote backend)
        run: |
          terraform -chdir="module/${{ steps.mod.outputs.dir }}" init \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            -backend-config="key=${{ steps.tfmeta_apply.outputs.state_key }}"

      - name: Terraform ${{ inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        run: |
          terraform -chdir="module/${{ steps.mod.outputs.dir }}" apply -input=false -auto-approve tfplan
