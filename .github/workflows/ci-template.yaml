---
name: Continuous Integration

on:
  workflow_call:
    inputs:
      root_module_folder_relative_path:
        description: 'Root Module Folder Relative Path'
        default: '.'
        type: string
      terraform_cli_version:
        description: 'Terraform CLI Version'
        default: 'latest'
        type: string

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    environment: alz-mgmt-plan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Terraform Format Check
        run: |
          terraform \
          -chdir="${{ inputs.root_module_folder_relative_path }}" \
          fmt -check

      - name: Terraform Init (no backend)
        run: |
          terraform \
          -chdir="${{ inputs.root_module_folder_relative_path }}" \
          init -backend=false

      - name: Terraform Validate
        run: |
          terraform \
          -chdir="${{ inputs.root_module_folder_relative_path }}" \
          validate

  plan:
    name: Validate Terraform Plan
    needs: validate
    runs-on: ubuntu-latest
    concurrency:
      group: mgmt-tfstate-${{ inputs.root_module_folder_relative_path }}
      cancel-in-progress: false
    environment: alz-mgmt-plan
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: '${{ vars.AZURE_CLIENT_ID }}'
      ARM_SUBSCRIPTION_ID: '${{ vars.AZURE_SUBSCRIPTION_ID }}'
      ARM_TENANT_ID: '${{ vars.AZURE_TENANT_ID }}'
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Derive Terraform state key from path
        id: names
        shell: bash
        run: |
          root="${{ inputs.root_module_folder_relative_path }}"
          root="${root#./}"; root="${root%/}"
          if [ -z "$root" ] || [ "$root" = "." ]; then
            key="root/terraform.tfstate"
          else
            key="$root/terraform.tfstate"
          fi
          echo "state_key=$key" >> "$GITHUB_OUTPUT"

      - name: Terraform Init (remote backend)
        run: |
          terraform \
          -chdir="${{ inputs.root_module_folder_relative_path }}" \
          init \
          -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}" \
          -backend-config="key=${{ steps.names.outputs.state_key }}"

      - name: Terraform Plan
        id: plan
        run: |
          terraform \
          -chdir="${{ inputs.root_module_folder_relative_path }}" \
          plan -input=false

      - name: Update Pull Request
        if: (success() || failure()) && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mod = `${{ toJSON(inputs.root_module_folder_relative_path) }}`
            const outcome = `${{ steps.plan.outcome }}`
            const output = `#### Terraform Plan ðŸ“– \`${outcome}\` for **${mod}**

            <details><summary>Run details</summary>

            The plan was a \`${outcome}\`. See the workflow logs for full details.

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
