---
name: Continuous Integration

on:
  workflow_call:
    inputs:
      root_module_folder_relative_path: { type: string, default: '.' }
      terraform_cli_version: { type: string, default: 'latest' }
      base_ref: { type: string, default: '' }
      skip_change_detection: { type: boolean, default: false }

jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.out.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: skip
        if: ${{ inputs.skip_change_detection }}
        run: echo "this=true" >> "$GITHUB_OUTPUT"

      - id: filter
        if: ${{ !inputs.skip_change_detection }}
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ inputs.base_ref }}
          filters: |
            this:
              - '${{ inputs.root_module_folder_relative_path }}'

      - id: out
        run: |
          val="${{ steps.skip.outputs.this || steps.filter.outputs.this }}"
          echo "changed=$val" >> "$GITHUB_OUTPUT"

  validate:
    name: Validate Terraform
    if: ${{ needs.gate.outputs.changed == 'true' }}
    needs: gate
    runs-on: ubuntu-latest
    environment: alz-mgmt-plan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Resolve module dir & key
        id: tfmeta
        uses: ./.github/actions/tf-paths
        with:
          path: ${{ inputs.root_module_folder_relative_path }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Terraform Format Check
        run: terraform -chdir="${{ steps.tfmeta.outputs.dir }}" fmt -check

      - name: Terraform Init (no backend)
        run: terraform -chdir="${{ steps.tfmeta.outputs.dir }}" init -backend=false

      - name: Terraform Validate
        run: terraform -chdir="${{ steps.tfmeta.outputs.dir }}" validate

  plan:
    name: Validate Terraform Plan
    if: ${{ needs.gate.outputs.changed == 'true' }}
    needs: validate
    runs-on: ubuntu-latest
    concurrency: mgmt-tfstate-${{ inputs.root_module_folder_relative_path }}
    environment: alz-mgmt-plan
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: '${{ vars.AZURE_CLIENT_ID }}'
      ARM_SUBSCRIPTION_ID: '${{ vars.AZURE_SUBSCRIPTION_ID }}'
      ARM_TENANT_ID: '${{ vars.AZURE_TENANT_ID }}'
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Resolve module directory (strip /**)
        id: mod
        shell: bash
        run: |
          raw="${{ inputs.root_module_folder_relative_path }}"
          clean="${raw%%/**}"
          echo "dir=$clean" >> "$GITHUB_OUTPUT"

      - name: Resolve module dir & key
        id: tfmeta
        uses: ./.github/actions/tf-paths
        with:
          path: ${{ inputs.root_module_folder_relative_path }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Terraform Init (remote backend)
        run: |
          terraform -chdir="${{ steps.mod.outputs.dir }}" init \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            -backend-config="key=${{ steps.tfmeta.outputs.state_key }}"

      - name: Terraform Plan
        id: plan
        run: terraform -chdir="${{ steps.mod.outputs.dir }}" plan -input=false

      - name: Update Pull Request
        if: (success() || failure()) && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mod = `${{ toJSON(steps.mod.outputs.dir) }}`
            const outcome = `${{ steps.plan.outcome }}`
            const output = `#### Terraform Plan ðŸ“– \`${outcome}\` for **${mod}**

            <details><summary>Run details</summary>

            The plan was a \`${outcome}\`. See the workflow logs for full details.

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
